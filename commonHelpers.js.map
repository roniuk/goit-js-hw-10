{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst input = document.getElementById('datetime-picker');\nconst btnStart = document.querySelector('button[data-start]');\nconst userDay = document.querySelector('span[data-days]');\nconst userHours = document.querySelector('span[data-hours]');\nconst userMinutes = document.querySelector('span[data-minutes]');\nconst userSeconds = document.querySelector('span[data-seconds]');\n\nbtnStart.disabled = true;\nlet userSelectedDate = null;\nlet diff = 0;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n    onClose(selectedDates) {\n        userSelectedDate = selectedDates[0];\n        diff = userSelectedDate - Date.now();\n        \n        if (userSelectedDate <= Date.now()) {\n        iziToast.show({\n        message: 'Please choose a date in the future',\n        messageColor: '#FFFFFF',\n        backgroundColor: '#B51B1B',\n        position: 'topRight',\n        });\n            \n        btnStart.disabled = true; \n            \n        } else {\n            btnStart.disabled = false;  \n        }\n  },\n};\n\nflatpickr(input, options);\n\nbtnStart.addEventListener(\"click\", () => {\nbtnStart.disabled = true;\ninput.disabled = true;\n    \nlet timerInterval = setInterval(() => {\n    if (diff <= 0) {\n      clearInterval(timerInterval);\n    } else {\n      onTimerStart(diff);\n      diff -= 1000;\n    }\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n\nfunction onTimerStart(diff) {\n  const timer = convertMs(diff);\n  userDay.textContent = `${addLeadingZero(timer.days)}`;\n  userHours.textContent = `${addLeadingZero(timer.hours)}`;\n  userMinutes.textContent = `${addLeadingZero(timer.minutes)}`;\n  userSeconds.textContent = `${addLeadingZero(timer.seconds)}`;\n}"],"names":["input","btnStart","userDay","userHours","userMinutes","userSeconds","userSelectedDate","diff","options","selectedDates","iziToast","flatpickr","timerInterval","onTimerStart","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","timer"],"mappings":"2GAKA,MAAMA,EAAQ,SAAS,eAAe,iBAAiB,EACjDC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAU,SAAS,cAAc,iBAAiB,EAClDC,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAc,SAAS,cAAc,oBAAoB,EAE/DJ,EAAS,SAAW,GACpB,IAAIK,EAAmB,KACnBC,EAAO,EAEX,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACf,QAAQC,EAAe,CACnBH,EAAmBG,EAAc,CAAC,EAClCF,EAAOD,EAAmB,KAAK,MAE3BA,GAAoB,KAAK,OAC7BI,EAAS,KAAK,CACd,QAAS,qCACT,aAAc,UACd,gBAAiB,UACjB,SAAU,UAClB,CAAS,EAEDT,EAAS,SAAW,IAGhBA,EAAS,SAAW,EAE7B,CACH,EAEAU,EAAUX,EAAOQ,CAAO,EAExBP,EAAS,iBAAiB,QAAS,IAAM,CACzCA,EAAS,SAAW,GACpBD,EAAM,SAAW,GAEjB,IAAIY,EAAgB,YAAY,IAAM,CAC9BL,GAAQ,EACV,cAAcK,CAAa,GAE3BC,EAAaN,CAAI,EACjBA,GAAQ,IAEX,EAAE,GAAI,CACT,CAAC,EAED,SAASO,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAClE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CAEA,SAASR,EAAaN,EAAM,CAC1B,MAAMe,EAAQR,EAAUP,CAAI,EAC5BL,EAAQ,YAAc,GAAGkB,EAAeE,EAAM,IAAI,CAAC,GACnDnB,EAAU,YAAc,GAAGiB,EAAeE,EAAM,KAAK,CAAC,GACtDlB,EAAY,YAAc,GAAGgB,EAAeE,EAAM,OAAO,CAAC,GAC1DjB,EAAY,YAAc,GAAGe,EAAeE,EAAM,OAAO,CAAC,EAC5D"}